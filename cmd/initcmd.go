/*
Copyright Â© 2023 Kyle Tryon (a.k.a TechSquidTV) makeGPT@TechSquidTV.com
*/
package cmd

import (
	"github.com/TechSquidTV/makeGPT/packages/api"
	"github.com/TechSquidTV/makeGPT/packages/config"
	"github.com/TechSquidTV/makeGPT/packages/textarea"
	"github.com/charmbracelet/log"
	"github.com/erikgeiser/promptkit/textinput"
	"github.com/spf13/cobra"
)

var gptConfig *config.GPTConfig

// initCmd represents the init command
var initCmd = &cobra.Command{
	Use:   "init [path]",
	Short: "initialize a new GPT",
	Long:  `Initialize a new GPT project in the given directory. This will generate the necessary files and configuration to get started.`,
	Args:  cobra.MaximumNArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		log.SetLevel(log.DebugLevel)
		log.Debug("Running init command")
		var dir string
		if len(args) > 0 {
			dir = args[0]
		} else {
			dir = "."
		}
		gptConfig.FileStructure.BaseDir = dir
		if !nonInteractive {
			inputName := textinput.New("Name of GPT: ")
			if gptConfig.Config.Name != "" {
				inputName.Placeholder = gptConfig.Config.Name
			}
			inputName.Placeholder = "makeGPT-demo"
			name, err := inputName.RunPrompt()
			if err != nil {
				log.Fatalf("Prompt failed: \n%v\n", err)
			}
			gptConfig.Config.Name = name

			inputDescription := textinput.New("Description of GPT: ")
			if gptConfig.Config.Description != "" {
				inputDescription.Placeholder = gptConfig.Config.Description
			}
			inputDescription.Placeholder = "A demo GPT generated by makeGPT"
			description, err := inputDescription.RunPrompt()
			if err != nil {
				log.Fatalf("Prompt failed: \n%v\n", err)
			}
			gptConfig.Config.Description = description

			inputInstructions, err := textarea.New(`Write your GPT prompt instructions here.
  You can format your prompt as a multi-line string as shown here, 
  or any arbitrary format that makes sense for your use case, such as YAML or Markdown.`)
			if err != nil {
				log.Errorf("Error getting input: \n%v\n", err)
			}
			gptConfig.Config.Instructions = inputInstructions
		}

		// Create the GPT on OpenAI
		log.Info("Initializing new GPT on OpenAI...")
		gizmo, err := api.CreateGPT(*gptConfig)
		if err != nil {
			log.Fatalf("Failed to create GPT: \n%v\n", err)
		}

		// Set the ID of the GPT
		gptConfig.Config.ID = gizmo.Gizmo.ID

		// Create the directories
		gptConfig.CreateDirectories()

		// Create the files
		gptConfig.CreateFiles()

	},
}

func init() {
	rootCmd.AddCommand(initCmd)
	_, err := api.CheckBearerToken()
	if err != nil {
		log.Fatalf("Failed to get OpenAI Bearer token: \n%v\n", err)
	}
	gptConfig = config.NewConfig(".")
	// Binding string flags
	initCmd.Flags().StringVarP(&gptConfig.Config.Name, "name", "n", "", "Name of the GPT")
	initCmd.Flags().StringVarP(&gptConfig.Config.Description, "description", "d", "", "Description of the GPT")
	initCmd.Flags().StringVarP(&gptConfig.Config.Instructions, "instructions", "i", "", "Instructions for the GPT")

	// Binding a string slice flag
	initCmd.Flags().StringSliceVarP(&gptConfig.Config.Starters, "starters", "s", []string{}, "Starters for the GPT")
}
